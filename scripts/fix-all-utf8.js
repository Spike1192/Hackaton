const { Pool } = require('pg');

// Cargar variables de entorno
require('dotenv').config({ path: '.env.local' });

const pool = new Pool({
  host: process.env.DB_HOST || 'localhost',
  port: parseInt(process.env.DB_PORT || '5432'),
  user: process.env.DB_USER || 'postgres',
  password: process.env.DB_PASSWORD || '123456',
  database: process.env.DB_NAME || 'talento_tech_db',
});

async function fixAllUTF8Data() {
  try {
    console.log('üîß Corrigiendo TODOS los datos con codificaci√≥n UTF-8...\n');

    // Configurar client_encoding
    await pool.query("SET client_encoding TO 'UTF8'");
    console.log('‚úÖ Client encoding configurado a UTF-8');

    // Lista completa de correcciones
    const corrections = [
      // Profesores
      { table: 'teachers', column: 'first_name', old: 'Mar√É¬≠a', new: 'Mar√≠a' },
      { table: 'teachers', column: 'first_name', old: 'Ana', new: 'Ana' },
      { table: 'teachers', column: 'last_name', old: 'P√É¬©rez', new: 'P√©rez' },
      { table: 'teachers', column: 'last_name', old: 'Garc√É¬≠a', new: 'Garc√≠a' },
      { table: 'teachers', column: 'last_name', old: 'Ram√É¬≠rez', new: 'Ram√≠rez' },
      { table: 'teachers', column: 'last_name', old: 'L√É¬≥pez', new: 'L√≥pez' },
      
      // Materias
      { table: 'subjects', column: 'name', old: 'Matem√É¬°ticas', new: 'Matem√°ticas' },
      { table: 'subjects', column: 'name', old: 'Ingl√É¬©s', new: 'Ingl√©s' },
      { table: 'subjects', column: 'name', old: 'Tecnolog√É¬≠a', new: 'Tecnolog√≠a' },
      { table: 'subjects', column: 'description', old: 'Matem√É¬°ticas b√É¬°sicas y avanzadas', new: 'Matem√°ticas b√°sicas y avanzadas' },
      { table: 'subjects', column: 'description', old: 'Comunicaci√É¬≥n y literatura', new: 'Comunicaci√≥n y literatura' },
      { table: 'subjects', column: 'description', old: 'Biolog√É¬≠a, qu√É¬≠mica y f√É¬≠sica', new: 'Biolog√≠a, qu√≠mica y f√≠sica' },
      { table: 'subjects', column: 'description', old: 'Historia y geograf√É¬≠a', new: 'Historia y geograf√≠a' },
      { table: 'subjects', column: 'description', old: 'Arte, m√É¬∫sica y expresi√É¬≥n', new: 'Arte, m√∫sica y expresi√≥n' },
      { table: 'subjects', column: 'description', old: 'Deportes y actividad f√É¬≠sica', new: 'Deportes y actividad f√≠sica' },
      { table: 'subjects', column: 'description', old: 'Idioma ingl√É¬©s', new: 'Idioma ingl√©s' },
      { table: 'subjects', column: 'description', old: 'Inform√É¬°tica y tecnolog√É¬≠a', new: 'Inform√°tica y tecnolog√≠a' },
      
      // Niveles educativos
      { table: 'levels', column: 'description', old: 'Educaci√É¬≥n preescolar para ni√É¬±os de 3 a 5 a√É¬±os', new: 'Educaci√≥n preescolar para ni√±os de 3 a 5 a√±os' },
      { table: 'levels', column: 'description', old: 'Educaci√É¬≥n primaria de 1√Ç¬∞ a 6√Ç¬∞ grado', new: 'Educaci√≥n primaria de 1¬∞ a 6¬∞ grado' },
      { table: 'levels', column: 'description', old: 'Educaci√É¬≥n secundaria de 7√Ç¬∞ a 11√Ç¬∞ grado', new: 'Educaci√≥n secundaria de 7¬∞ a 11¬∞ grado' },
    ];

    console.log('üîÑ Aplicando correcciones...');
    let correctedCount = 0;

    for (const correction of corrections) {
      try {
        const result = await pool.query(`
          UPDATE ${correction.table} 
          SET ${correction.column} = $1 
          WHERE ${correction.column} = $2
        `, [correction.new, correction.old]);
        
        if (result.rowCount > 0) {
          console.log(`  ‚úÖ ${correction.table}.${correction.column}: "${correction.old}" ‚Üí "${correction.new}" (${result.rowCount} filas)`);
          correctedCount += result.rowCount;
        }
      } catch (error) {
        console.log(`  ‚ö†Ô∏è Error en ${correction.table}.${correction.column}: ${error.message}`);
      }
    }

    console.log(`\n‚úÖ Total de correcciones aplicadas: ${correctedCount}`);

    // Verificar los cambios
    console.log('\nüîç Verificando datos corregidos...');
    
    const teachersResult = await pool.query(`
      SELECT first_name, last_name, email 
      FROM teachers 
      ORDER BY id
    `);
    
    console.log('üìä Datos de profesores (corregidos):');
    teachersResult.rows.forEach((teacher, index) => {
      console.log(`  ${index + 1}. ${teacher.first_name} ${teacher.last_name} - ${teacher.email}`);
    });

    const subjectsResult = await pool.query(`
      SELECT name, description 
      FROM subjects 
      ORDER BY id
    `);
    
    console.log('\nüìö Datos de materias (corregidos):');
    subjectsResult.rows.forEach((subject, index) => {
      console.log(`  ${index + 1}. ${subject.name} - ${subject.description}`);
    });

    const levelsResult = await pool.query(`
      SELECT name, description 
      FROM levels 
      ORDER BY id
    `);
    
    console.log('\nüìñ Datos de niveles (corregidos):');
    levelsResult.rows.forEach((level, index) => {
      console.log(`  ${index + 1}. ${level.name} - ${level.description}`);
    });

    console.log('\n‚úÖ Todos los datos han sido corregidos exitosamente!');
    console.log('Los caracteres especiales ahora deber√≠an mostrarse correctamente.');

  } catch (error) {
    console.error('‚ùå Error corrigiendo datos:', error);
    throw error;
  } finally {
    await pool.end();
  }
}

fixAllUTF8Data()
  .then(() => {
    console.log('\nüéâ Correcci√≥n completa de UTF-8 finalizada!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå Error:', error);
    process.exit(1);
  });
