const { Pool } = require('pg');

// Cargar variables de entorno
require('dotenv').config({ path: '.env.local' });

const pool = new Pool({
  host: process.env.DB_HOST || 'localhost',
  port: parseInt(process.env.DB_PORT || '5432'),
  user: process.env.DB_USER || 'postgres',
  password: process.env.DB_PASSWORD || '123456',
  database: process.env.DB_NAME || 'talento_tech_db',
});

async function fixUTF8Data() {
  try {
    console.log('üîß Corrigiendo datos con codificaci√≥n UTF-8...\n');

    // Configurar client_encoding
    await pool.query("SET client_encoding TO 'UTF8'");
    console.log('‚úÖ Client encoding configurado a UTF-8');

    // Actualizar profesores con nombres correctos
    console.log('üë®‚Äçüè´ Actualizando profesores...');
    await pool.query(`
      UPDATE teachers SET 
        first_name = 'Mar√≠a' WHERE first_name = 'Mar√É¬≠a'
    `);
    await pool.query(`
      UPDATE teachers SET 
        first_name = 'Ana' WHERE first_name = 'Ana'
    `);
    await pool.query(`
      UPDATE teachers SET 
        last_name = 'P√©rez' WHERE last_name = 'P√É¬©rez'
    `);
    await pool.query(`
      UPDATE teachers SET 
        last_name = 'Garc√≠a' WHERE last_name = 'Garc√É¬≠a'
    `);
    await pool.query(`
      UPDATE teachers SET 
        last_name = 'Ram√≠rez' WHERE last_name = 'Ram√É¬≠rez'
    `);
    await pool.query(`
      UPDATE teachers SET 
        last_name = 'L√≥pez' WHERE last_name = 'L√É¬≥pez'
    `);
    console.log('‚úÖ Profesores actualizados');

    // Actualizar materias con nombres correctos
    console.log('üìö Actualizando materias...');
    await pool.query(`
      UPDATE subjects SET 
        name = 'Matem√°ticas' WHERE name = 'Matem√É¬°ticas'
    `);
    await pool.query(`
      UPDATE subjects SET 
        description = 'Matem√°ticas b√°sicas y avanzadas' WHERE description = 'Matem√É¬°ticas b√É¬°sicas y avanzadas'
    `);
    await pool.query(`
      UPDATE subjects SET 
        description = 'Comunicaci√≥n y literatura' WHERE description = 'Comunicaci√É¬≥n y literatura'
    `);
    await pool.query(`
      UPDATE subjects SET 
        description = 'Biolog√≠a, qu√≠mica y f√≠sica' WHERE description = 'Biolog√É¬≠a, qu√É¬≠mica y f√É¬≠sica'
    `);
    await pool.query(`
      UPDATE subjects SET 
        description = 'Historia y geograf√≠a' WHERE description = 'Historia y geograf√É¬≠a'
    `);
    await pool.query(`
      UPDATE subjects SET 
        description = 'Arte, m√∫sica y expresi√≥n' WHERE description = 'Arte, m√É¬∫sica y expresi√É¬≥n'
    `);
    await pool.query(`
      UPDATE subjects SET 
        description = 'Deportes y actividad f√≠sica' WHERE description = 'Deportes y actividad f√É¬≠sica'
    `);
    console.log('‚úÖ Materias actualizadas');

    // Actualizar niveles educativos
    console.log('üìñ Actualizando niveles educativos...');
    await pool.query(`
      UPDATE levels SET 
        description = 'Educaci√≥n preescolar para ni√±os de 3 a 5 a√±os' WHERE description = 'Educaci√É¬≥n preescolar para ni√É¬±os de 3 a 5 a√É¬±os'
    `);
    await pool.query(`
      UPDATE levels SET 
        description = 'Educaci√≥n primaria de 1¬∞ a 6¬∞ grado' WHERE description = 'Educaci√É¬≥n primaria de 1√Ç¬∞ a 6√Ç¬∞ grado'
    `);
    await pool.query(`
      UPDATE levels SET 
        description = 'Educaci√≥n secundaria de 7¬∞ a 11¬∞ grado' WHERE description = 'Educaci√É¬≥n secundaria de 7√Ç¬∞ a 11√Ç¬∞ grado'
    `);
    console.log('‚úÖ Niveles educativos actualizados');

    // Verificar los cambios
    console.log('\nüîç Verificando datos corregidos...');
    
    const teachersResult = await pool.query(`
      SELECT first_name, last_name, email 
      FROM teachers 
      LIMIT 3
    `);
    
    console.log('üìä Datos de profesores (corregidos):');
    teachersResult.rows.forEach((teacher, index) => {
      console.log(`  ${index + 1}. ${teacher.first_name} ${teacher.last_name} - ${teacher.email}`);
    });

    const subjectsResult = await pool.query(`
      SELECT name, description 
      FROM subjects 
      LIMIT 3
    `);
    
    console.log('\nüìö Datos de materias (corregidos):');
    subjectsResult.rows.forEach((subject, index) => {
      console.log(`  ${index + 1}. ${subject.name} - ${subject.description}`);
    });

    console.log('\n‚úÖ Datos corregidos exitosamente!');
    console.log('Los caracteres especiales ahora deber√≠an mostrarse correctamente.');

  } catch (error) {
    console.error('‚ùå Error corrigiendo datos:', error);
    throw error;
  } finally {
    await pool.end();
  }
}

fixUTF8Data()
  .then(() => {
    console.log('\nüéâ Correcci√≥n de UTF-8 completada!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå Error:', error);
    process.exit(1);
  });
